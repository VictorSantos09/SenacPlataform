@implements IDisposable

@inject NavigationManager NavigationManager

<RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="true">
    <AuthorizeView>
        <Authorized>
            <RadzenPanelMenuItem Text="Inicio" Icon="Home" Path="/" />
        </Authorized>
        <NotAuthorized>
            @* <RadzenPanelMenuItem Text="Criar conta" Icon="person_add" Path="Account/Register" /> *@
            <RadzenPanelMenuItem Text="Entrar" Icon="Login" Path="/Login" />
            <RadzenPanelMenuItem Text="Pessoas" Icon="person">
                <RadzenPanelMenuItem Text="Cadastro" Icon="add" Path="/pessoas/cadastro" />
                <RadzenPanelMenuItem Text="Consulta" Icon="visibility" Path="pessoas/consulta" />
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Disciplinas" Path="/disciplina/consulta" Icon="auto_stories" />
            <RadzenPanelMenuItem Text="Configurações" Icon="settings">
                <RadzenPanelMenuItem Text="Temas" Icon="color_lens" Path="/configuracoes-sistema" />
            </RadzenPanelMenuItem>
        </NotAuthorized>
    </AuthorizeView>
</RadzenPanelMenu>

@code {
    bool sidebarExpanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

