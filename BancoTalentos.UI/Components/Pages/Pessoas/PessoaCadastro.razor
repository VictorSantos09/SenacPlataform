@page "/pessoas/cadastro/{Id:int?}"
@using BancoTalentos.Domain.Entity.Enums
@using BancoTalentos.Domain.Services.Contato.Dto
@using BancoTalentos.Domain.Services.Disciplina.Dto
@using BancoTalentos.Domain.Services.Disciplina.Interfaces
@using BancoTalentos.Domain.Services.Imagem.Dto
@using BancoTalentos.Domain.Services.Pessoa.Interfaces
@using BancoTalentos.Domain.Services.Pessoas
@using BancoTalentos.Domain.Entity;
@using BancoTalentos.Domain.Services.Pessoas.Base.Dto
@using BancoTalentos.Domain.Services.TipoContato.Interface
@using BancoTalentos.UI.Components.Pages.Common
@using BancoTalentos.UI.Components.Pages.Pessoas.dto
@using QuickKit.Blazor.Services.Notification
@using SenacPlataform.Shared.Converter
@using SenacPlataform.Shared.Extensions
@using Radzen

@inject IPessoaMediatorService service
@inject IConsultarDisciplinaService consultarDisciplinaService
@inject IJSRuntime JSRuntime
@inject INotifierService NotifierService
@inject ITipoContatoConsultaService TipoContatoConsultaService
@inherits Page

<RadzenTemplateForm Data="@Dto" Submit="@(async (PessoaCadastroDto dto) => { await Gravar(); })" InvalidSubmit="@( () => HasInvalidSubmit = true)">
    <RadzenRow>
        <!--Informações pessoais-->
        <RadzenColumn>
            <RadzenFieldset Text="Informações pessoais" Icon="person">
                <RadzenStack Gap="1rem">
                    <!--Nome-->
                    <RadzenFormField Text="Nome" AllowFloatingLabel=true>
                        <ChildContent>
                            <RadzenTextBox Name="Nome" @bind-Value="@Dto.Nome" Placeholder="Digite o nome completo" Style="width: 100%;" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Nome" Text="@REQUIRED_FIELD" />
                            <RequiredWarning InvalidSubmit=@HasInvalidSubmit />
                        </Helper>
                    </RadzenFormField>

                    <!--Carga Horária-->
                    <RadzenFormField Text="CargaHoraria" AllowFloatingLabel=true>
                        <ChildContent>
                            <RadzenNumeric Max="44" ShowUpDown="true" Name="CargaHoraria" TValue="int" @bind-Value="@Dto.CargaHoraria" Placeholder="Digite a carga horária semanal" Style="width: 100%;" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="CargaHoraria" Text="@REQUIRED_FIELD" />
                            <RequiredWarning InvalidSubmit=@HasInvalidSubmit />
                        </Helper>
                    </RadzenFormField>

                    <!-- Cargo -->
                    <RadzenFormField Text="Cargo" AllowFloatingLabel=true>
                        <ChildContent>
                            <RadzenDropDown Data="@(EnumConverter.SNToList<CARGO>())"
                                            @bind-Value="@Dto.Cargo"
                                            Placeholder="Selecione o cargo"
                                            Style="width: 100%;"
                                            Name="Cargo"
                                            AllowClear="true" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Cargo" Text="@REQUIRED_FIELD" />
                            <RequiredWarning InvalidSubmit=@HasInvalidSubmit />
                        </Helper>
                    </RadzenFormField>

                    <!-- Habilidades -->
                    <RadzenFormField Text="Habilidades" AllowFloatingLabel=true>
                        <ChildContent>
                            <RadzenDropDown Multiple=true
                                            Data="@_disciplinasExistentes"
                                            AllowClear="true"
                                            TextProperty="@nameof(DisciplinaDto.Descricao)"
                                            @bind-Value="@Dto.HabilidadesDisciplinas"
                                            Placeholder="Selecione as habilidades"
                                            Chips="true"
                                            AllowSelectAll="true"
                                            AllowFiltering="true"
                                            Name="Habilidades"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            RemoveChipTitle="Deselecionar" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Habilidades" Text="@REQUIRED_FIELD" />
                        </Helper>
                    </RadzenFormField>

                    <!-- Foto de Perfil -->
                    <RadzenFormField Text="Foto de perfil" AllowFloatingLabel=true>
                        <ChildContent>
                            <RadzenUpload Multiple="false"
                                          Style="width: 100%;"
                                          Accept="image/*"
                                          Auto="true"
                                          Change="@OnImagemPerfilChanged" />
                            <RadzenImage Path="@($"data:image/jpeg;base64,{Dto?.Foto?.Image}")"
                                         AlternateText="Foto de perfil"
                                         Visible="@(Dto.Foto is not null)"
                                         Style="width: 100%; max-height: 200px;" />
                        </ChildContent>
                    </RadzenFormField>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>

        <!--Informações de contato-->
        <RadzenColumn>
            <RadzenFieldset Text="Informações de contato" Icon="email">
                <RadzenStack Gap="1rem">
                    <!-- Email ou Telefone -->
                    <RadzenFormField Text="Contato" AllowFloatingLabel=true>
                        <ChildContent>
                            <RadzenTextBox Name="Contato"
                                           @bind-Value="@_contatoInformado"
                                           Placeholder="Digite o email ou telefone"
                                           Style="width: 100%;" />

                            <RadzenButton Icon="add"
                                          Text="Adicionar"
                                          Click="@AdicionarContato"
                                          Disabled="@IsSaving" />

                        </ChildContent>
                        <Helper>
                            <RadzenStack Gap="1px">
                                <RadzenText TextStyle="TextStyle.Caption">Email ou telefone.</RadzenText>
                            </RadzenStack>
                        </Helper>
                    </RadzenFormField>

                    @if (Dto.Contatos.Count > 0)
                    {
                        <RadzenPanel AllowCollapse="true">
                            <HeaderTemplate>
                                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                    <RadzenText Text="Contatos" TextStyle="TextStyle.H6" />
                                </RadzenText>
                            </HeaderTemplate>
                            <ChildContent>
                                @foreach (var item in Dto.Contatos)
                                {
                                    <RadzenRow class="rz-py-2">
                                        <RadzenColumn Size="2">
                                            <RadzenText Text="@item.Contato" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="2" class="rz-px-5">
                                            <RadzenButton Icon="remove" Size="ButtonSize.Small" Click="@(() => RemoverContato(item))" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                }
                            </ChildContent>
                        </RadzenPanel>
                    }
                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>
    </RadzenRow>

    <!-- Botões de Ação -->
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-pt-5">
        <RadzenButton ButtonType="ButtonType.Submit"
                      Text="@(Id.HasValue ? "Atualizar" : "Salvar")"
                      Icon="@(Id.HasValue ? "edit" : "save")"
                      Disabled="@IsSaving"
                      Style="background-color: #4CAF50; color: white; padding: 10px 20px; border-radius: 8px;" />
        <RadzenButton Disabled="@IsSaving" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Text="Cancelar" Icon="cancel" Style="padding: 10px 20px; border-radius: 8px;" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    public PessoaCadastroDto Dto { get; set; } = new();
    private IEnumerable<DisciplinaDto> _disciplinasExistentes = [];
    private string? _contatoInformado;
    private bool IsSaving = false;
    private const string REQUIRED_FIELD = "Campo obrigatório";

    [Parameter] public int? Id { get; set; }
    private string TituloPagina => Id.HasValue ? "Editar Pessoa" : "Nova Pessoa";

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var pessoa = await service.GetByIdAsync(Id.Value);
            if (pessoa is not null)
            {
                Dto = new PessoaCadastroDto
                    {
                        Id = pessoa.Id,
                        Nome = pessoa.Nome,
                        Cargo = pessoa.Cargo,
                        CargaHoraria = pessoa.CargaHorariaSemanal,
                        Contatos = pessoa.Contatos?.ToList() ?? new List<ContatoDto>(),
                        HabilidadesDisciplinas = pessoa.IdsDisciplinas?
                                                        .Select(id => new DisciplinaDto
                                                        {
                                                            Id = id,
                                                            Nome = _disciplinasExistentes.FirstOrDefault(d => d.Id == id)?.Nome ?? "Nome Padrão",
                                                            CargaHoraria = _disciplinasExistentes.FirstOrDefault(d => d.Id == id)?.CargaHoraria ?? 0
                                                        })
                                                        .ToList() ?? new List<DisciplinaDto>(),
                        Foto = pessoa.Foto
                    };
            }
        }
        else
        {
            var result = await consultarDisciplinaService.GetAllAsync(default);
            _disciplinasExistentes = result.ValueOrDefault;
        }
    }

    async Task ExibirAlerta(string mensagem, string summary = "Alerta")
    {
        NotifierService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = summary,
                Detail = mensagem,
                Duration = 4000
            });
    }

    async Task AdicionarContato()
    {
        if (IsSaving) return;

        IsSaving = true;

        try
        {
            if (string.IsNullOrWhiteSpace(_contatoInformado))
            {
                await ExibirAlerta("Contato inválido ou vazio.");
                return;
            }

            if (Dto.Contatos.Any(c => c.Contato == _contatoInformado))
            {
                await ExibirAlerta("Este contato já foi adicionado.");
                return;
            }

            TIPOS_CONTATOS tipoContatoInformado = new();
            if (_contatoInformado.IsEmail())
            {
                var result = await TipoContatoConsultaService.GetEmailAsync();

                if (result.IsSuccess)
                {
                    tipoContatoInformado = result.ValueOrDefault;
                }
            }
            else if (_contatoInformado.IsPhoneNumber())
            {
                var result = await TipoContatoConsultaService.GetTelefoneAsync();

                if (result.IsSuccess)
                {
                    tipoContatoInformado = result.ValueOrDefault;
                }
            }
            else
            {
                throw new ArgumentNullException("Contato inválido");
            }

            Dto.Contatos.Add(new ContatoDto
                {
                    Contato = _contatoInformado,
                    IdTipo = tipoContatoInformado.ID
                });

            _contatoInformado = string.Empty;
        }
        finally
        {
            IsSaving = false;
        }
    }

    void RemoverContato(ContatoDto contato)
    {
        Dto.Contatos.Remove(contato);
    }

    async Task OnImagemPerfilChanged(UploadChangeEventArgs args)
    {
        try
        {
            if (args.Files.Count() > 1) throw new Exception("Mais de um arquivo fornecido");

            var file = args.Files.FirstOrDefault();

            if (file is null)
            {
                Dto.Foto = null;
                return;
            }

            long maxFileSize = 10 * 1024 * 1024;
            using (var stream = file.OpenReadStream(maxFileSize))
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                string base64String = Convert.ToBase64String(memoryStream.ToArray());

                Dto.Foto = new ImagemBase64DTO
                    {
                        ContentType = file.ContentType,
                        FileName = file.Name,
                        Image = base64String,
                        Size = file.Size
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao processar o arquivo: {ex.Message}");
            Dto.Foto = null;
        }
    }

    async Task Gravar()
    {
        IsSaving = true;
        HasValidSubmit = true;
        try
        {
            var pessoaDto = new PessoaDto
                {
                    Id = Dto.Id,
                    Nome = Dto.Nome,
                    Cargo = Dto.Cargo,
                    CargaHorariaSemanal = Dto.CargaHoraria,
                    Contatos = Dto.Contatos,
                    IdsDisciplinas = Dto.HabilidadesDisciplinas?.Select(d => d.Id).ToList(),
                    Foto = Dto.Foto
                };

            if (Id.HasValue)
            {
                var result = await service.AtualizarAsync(pessoaDto.Id, pessoaDto);
                if (result.IsFailed)
                {
                    await ExibirAlerta($"Erro ao atualizar: {string.Join(", ", result.Errors)}");
                    return;
                }

                NotifierService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Pessoa atualizada com sucesso!",
                        Duration = 4000
                    });
            }
            else
            {
                var result = await service.CadastrarAsync(pessoaDto, CancellationToken.None);
                if (result.IsFailed)
                {
                    await ExibirAlerta($"Erro ao cadastrar: {string.Join(", ", result.Errors)}");
                    return;
                }

                NotifierService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Pessoa cadastrada com sucesso!",
                        Duration = 4000
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar: {ex.Message}");
        }
        finally
        {
            IsSaving = false;
        }
    }

    static string VerifyContact(string input)
    {
        if (input.IsEmail())
        {
            return "Email";
        }
        else if (input.IsPhoneNumber())
        {
            return "Telefone";
        }
        else
        {
            return "Inválido";
        }
    }
}