@page "/pessoas/cadastro/{Id:int?}"
@using BancoTalentos.Domain.Entity.Enums
@using BancoTalentos.Domain.Services.Contato.Dto
@using BancoTalentos.Domain.Services.Disciplina.Dto
@using BancoTalentos.Domain.Services.Disciplina.Interfaces
@using BancoTalentos.Domain.Services.Imagem.Dto
@using BancoTalentos.Domain.Services.Pessoa.Interfaces
@using BancoTalentos.Domain.Services.Pessoas
@using BancoTalentos.Domain.Entity;
@using BancoTalentos.Domain.Services.Pessoas.Base.Dto
@using BancoTalentos.UI.Components.Pages.Pessoas.dto
@using SenacPlataform.Shared.Converter
@using SenacPlataform.Shared.Extensions
@using Radzen

@inject IPessoaMediatorService service
@inject IConsultarDisciplinaService consultarDisciplinaService
@inject IJSRuntime JSRuntime
@inject Radzen.NotificationService NotificationService

<RadzenNotification />

<RadzenTemplateForm Data="@Dto" Submit="@(async (PessoaCadastroDto dto) => { await Gravar(); })">
    <RadzenRow Gap="1.5rem" Style="background: #f9f9f9; padding: 20px; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);">
        <!-- Informações Pessoais -->
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFieldset Text="Informações pessoais" Icon="person" Style="border-color: #ddd;">
                <RadzenStack Gap="1rem">
                    <!-- Nome -->
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Nome" />
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenTextBox Name="Nome" @bind-Value="@Dto.Nome" Placeholder="Digite o nome completo" Style="width: 100%;" />
                            <RadzenRequiredValidator Component="Nome" Text="O nome é obrigatório" />
                        </RadzenColumn>
                    </RadzenRow>
                    <!-- Carga Horária -->
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Carga horária" />
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenNumeric TValue="int" @bind-Value="@Dto.CargaHoraria" Placeholder="Digite a carga horária semanal" Style="width: 100%;" />
                        </RadzenColumn>
                    </RadzenRow>
                    <!-- Cargo -->
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Cargo" />
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenDropDown Data="@(EnumConverter.SNToList<CARGO>())"
                                            @bind-Value="@Dto.Cargo"
                                            Placeholder="Selecione o cargo"
                                            Style="width: 100%;"
                                            AllowClear="true" />
                        </RadzenColumn>
                    </RadzenRow>
                    <!-- Habilidades -->
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Habilidades" />
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenListBox Data="@_disciplinasExistentes"
                                           @bind-Value="@Dto.HabilidadesDisciplinas"
                                           TextProperty="@nameof(DisciplinaDto.Descricao)"
                                           Multiple="true"
                                           Style="width: 100%; max-height: 200"
                                           AllowClear="true"
                                           Placeholder="Selecione suas habilidades"
                                           SelectionMode="Radzen.ListBoxSelectionMode.Multiple" />
                        </RadzenColumn>
                    </RadzenRow>
                    <!-- Foto de Perfil -->
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Foto de perfil" />
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenUpload Multiple="false"
                                          Style="width: 100%;"
                                          Accept="image/*"
                                          Auto="true"
                                          Change="@OnImagemPerfilChanged" />
                            <RadzenImage Path="@($"data:image/jpeg;base64,{Dto?.Foto?.Image}")"
                                         AlternateText="Foto de perfil"
                                         Visible="@(Dto.Foto is not null)"
                                         Style="width: 100%; max-height: 200px;" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>

        <!-- Informações de Contato -->
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFieldset Text="Informações de contato" Icon="email" Style="border-color: #ddd;">
                <RadzenStack Gap="1rem">
                    <!-- Email ou Telefone -->
                    <RadzenRow>
                        <RadzenColumn Size="9">
                            <RadzenLabel Text="Email ou Telefone" />
                            <RadzenTextBox Name="Contato"
                                           @bind-Value="@_contatoInformado"
                                           Placeholder="Digite o email ou telefone"
                                           Style="width: 100%;" />
                        </RadzenColumn>
                        <RadzenColumn Size="3" Style="display: flex; align-items: center; justify-content: center; margin-top: 23px;">
                            <RadzenButton Icon="add"
                                          Text="Adicionar"
                                          Click="@AdicionarContato"
                                          Disabled="@IsSaving"
                                          Style="background-color: #007BFF; color: white; padding: 5px 10px; border-radius: 4px;" />
                        </RadzenColumn>
                    </RadzenRow>
                    <!-- Lista de Contatos -->
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Lista de Contatos" />
                            <RadzenListBox Data="@Dto.Contatos"
                                           @bind-Value="@_contatosSelecionados"
                                           TextProperty="Contato"
                                           TValue="List<ContatoDto>"
                                           Style="width: 100%; max-height: 200px;"
                                           Multiple="true"
                                           AllowClear="true" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>
    </RadzenRow>

    <!-- Botões de Ação -->
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Style="margin-top: 20px;">
        <RadzenButton ButtonType="ButtonType.Submit"
                      Text="@(Id.HasValue ? "Atualizar" : "Salvar")"
                      Icon="@(Id.HasValue ? "edit" : "save")"
                      Disabled="@IsSaving"
                      Style="background-color: #4CAF50; color: white; padding: 10px 20px; border-radius: 8px;" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Text="Cancelar" Icon="cancel" Style="padding: 10px 20px; border-radius: 8px;" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    Variant variant = Variant.Outlined;
    public PessoaCadastroDto Dto { get; set; } = new();
    private IEnumerable<DisciplinaDto> _disciplinasExistentes = [];
    private string _contatoInformado;
    private bool IsSaving = false;
    private List<ContatoDto> _contatosSelecionados = new();
    private HashSet<string> _mensagensAtivas = new();

    [Parameter] public int? Id { get; set; }
    private string TituloPagina => Id.HasValue ? "Editar Pessoa" : "Nova Pessoa";

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var pessoa = await service.GetByIdAsync(Id.Value);
            if (pessoa is not null)
            {
                Dto = new PessoaCadastroDto
                    {
                        Id = pessoa.Id,
                        Nome = pessoa.Nome,
                        Cargo = pessoa.Cargo,
                        CargaHoraria = pessoa.CargaHorariaSemanal,
                        Contatos = pessoa.Contatos?.ToList() ?? new List<ContatoDto>(),
                        HabilidadesDisciplinas = pessoa.IdsDisciplinas?
                            .Select(id => new DisciplinaDto
                            {
                                Id = id,
                                Nome = _disciplinasExistentes.FirstOrDefault(d => d.Id == id)?.Nome ?? "Nome Padrão",
                                CargaHoraria = _disciplinasExistentes.FirstOrDefault(d => d.Id == id)?.CargaHoraria ?? 0
                            })
                            .ToList() ?? new List<DisciplinaDto>(), 
                        Foto = pessoa.Foto
                    };
            }
        }
    }

    async Task ExibirAlerta(string mensagem)
    {
        if (_mensagensAtivas.Contains(mensagem)) return;

        _mensagensAtivas.Add(mensagem);

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Alerta",
                Detail = mensagem,
                Duration = 4000
            });

        await Task.Delay(4000);
        _mensagensAtivas.Remove(mensagem);
    }

    async Task AdicionarContato()
    {
        if (IsSaving) return;

        IsSaving = true;

        try
        {
            if (string.IsNullOrWhiteSpace(_contatoInformado))
            {
                await ExibirAlerta("Contato inválido ou vazio.");
                return;
            }

            if (Dto.Contatos.Any(c => c.Contato == _contatoInformado))
            {
                await ExibirAlerta("Este contato já foi adicionado.");
                return;
            }

            Dto.Contatos.Add(new ContatoDto
                {
                    Contato = _contatoInformado,
                    Id = Random.Shared.Next()
                });

            _contatoInformado = string.Empty;

            await ExibirAlerta("Contato adicionado com sucesso!");
        }
        finally
        {
            IsSaving = false;
        }
    }

    async Task OnImagemPerfilChanged(UploadChangeEventArgs args)
    {
        try
        {
            if (args.Files.Count() > 1) throw new Exception("Mais de um arquivo fornecido");

            var file = args.Files.FirstOrDefault();

            long maxFileSize = 10 * 1024 * 1024;

            using (var stream = file.OpenReadStream(maxFileSize))
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                string base64String = Convert.ToBase64String(memoryStream.ToArray());

                Dto.Foto = new ImagemBase64DTO
                    {
                        ContentType = file.ContentType,
                        FileName = file.Name,
                        Image = base64String,
                        Size = file.Size
                    };

                if (file is null)
                {
                    Dto.Foto = null;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao processar o arquivo: {ex.Message}");
            Dto.Foto = null;
        }
    }

    async Task Gravar()
    {
        IsSaving = true;
        try
        {
            var pessoaDto = new PessoaDto
                {
                    Id = Dto.Id,
                    Nome = Dto.Nome,
                    Cargo = Dto.Cargo,
                    CargaHorariaSemanal = Dto.CargaHoraria,
                    Contatos = Dto.Contatos,
                    IdsDisciplinas = Dto.HabilidadesDisciplinas?.Select(d => d.Id).ToList(),
                    Foto = Dto.Foto
                };

            if (Id.HasValue)
            {
                var result = await service.AtualizarAsync(pessoaDto.Id, pessoaDto);
                if (result.IsFailed)
                {
                    await ExibirAlerta($"Erro ao atualizar: {string.Join(", ", result.Errors)}");
                    return;
                }

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Pessoa atualizada com sucesso!",
                        Duration = 4000
                    });
            }
            else
            {
                var result = await service.CadastrarAsync(pessoaDto, CancellationToken.None);
                if (result.IsFailed)
                {
                    await ExibirAlerta($"Erro ao cadastrar: {string.Join(", ", result.Errors)}");
                    return;
                }

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Pessoa cadastrada com sucesso!",
                        Duration = 4000
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar: {ex.Message}");
        }
        finally
        {
            IsSaving = false;
        }
    }
}