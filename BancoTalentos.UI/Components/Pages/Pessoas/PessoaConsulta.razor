@page "/pessoas/consulta"
@using BancoTalentos.Domain.Entity
@using BancoTalentos.Domain.Repositories.Contracts.Interfaces
@using QuickKit.Blazor.Components.Grid
@using QuickKit.Blazor.Components.Grid.Export
@using QuickKit.Blazor.Services.Notification
@using SenacPlataform.Shared.Controllers

@inject INotifierService NotifierService
@inject IPESSOAS_REPOSITORY PessoasRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IGridExportProvider GridExportProvider

<Grid Data=@_pessoas
      ColumnsDeclared=@GetColumns()
      AllowManipulation=false
      CustomActionButton=@CustomButtons
      OnExportCSV="@(async args => await GridExportProvider.ExportAsync(GridComponent, _jsRuntime, ExportEndpoint.CSV, EXPORT_FILE_NAME))"
      OnExportExcel="@(async args => await GridExportProvider.ExportAsync(GridComponent, _jsRuntime, ExportEndpoint.EXCEL, EXPORT_FILE_NAME))"
      @ref="GridComponent" />

@code {
    private IEnumerable<ButtonComponent<PESSOAS>> CustomButtons = [];
    private IEnumerable<PESSOAS> _pessoas = [];
    private Grid<PESSOAS> GridComponent;
    private const string EXPORT_FILE_NAME = "Pessoas";

    protected override async Task OnInitializedAsync()
    {
        _pessoas = await PessoasRepository.GetAllAsync();
        CustomButtons = GetCustomButtons();
        await base.OnInitializedAsync();
    }

    private IEnumerable<GridColumn> GetColumns()
    {
        var output = new List<GridColumn>();

        output.Add(new GridColumn("Código", nameof(PESSOAS.ID), new GridColumnOptions<IRadzenComponent>()
            {
                Type = RadzenFormInputType.Numeric,
            }));

        output.Add(new GridColumn("Nome", nameof(PESSOAS.NOME), new GridColumnOptions<IRadzenComponent>()
            {
                Type = RadzenFormInputType.TextBox,
            }));

        output.Add(new GridColumn("Cargo", nameof(PESSOAS.CARGO), new GridColumnOptions<IRadzenComponent>()
            {
                Type = RadzenFormInputType.TextBox,
            }));

        output.Add(new GridColumn("Carga Horária", nameof(PESSOAS.CARGA_HORARIA), new GridColumnOptions<IRadzenComponent>()
            {
                Type = RadzenFormInputType.Numeric,
            }));

        return output;
    }

    private Task NotificarCliqueLinha(PESSOAS data)
    {
        NotifierService.Notify(new()
            {
                Detail = $"Vendo registro Nª{data.ID}.",
                Severity = NotificationSeverity.Success,
                Summary = "Clique",
                CloseOnClick = true
            });
        return Task.CompletedTask;
    }

    private IEnumerable<ButtonComponent<PESSOAS>> GetCustomButtons()
    {
        return new List<ButtonComponent<PESSOAS>>
        {
            new ()
            {
                ButtonStyle = ButtonStyle.Primary,
                Icon = "delete",
                Variant = Variant.Filled,
                OnClick =EventCallback.Factory.Create<PESSOAS>(this, async (data) => await NotificarCliqueLinha(data))
            },

        };
    }
}
