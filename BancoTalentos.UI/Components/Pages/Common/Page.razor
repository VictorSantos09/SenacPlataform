@using QuickKit.Blazor.Components.Grid.Export
@using QuickKit.Blazor.Services.Dialog
@using QuickKit.Blazor.Services.Notification
@using SenacPlataform.Shared.Controllers

@code {
    [Inject]
    protected INotifierService NotifierService { get; set; }
    [Inject]
    protected IJSRuntime JsRuntime { get; set; }
    [Inject]
    protected NavigationManager NavigationManager { get; set; }
    [Inject]
    protected IGridExportProvider GridExportProvider { get; set; }
    [Inject]
    public Radzen.DialogService DialogService { get; set; }
    protected bool IsLoading { get; set; }
    protected bool IsEditing { get; set; }
    protected bool ShowLoadingValue { get; set; }
    protected int LoadingValue { get; set; } = 100;
    protected ProgressBarMode LoadingMode { get; set; } = ProgressBarMode.Indeterminate;
    protected bool IsExportingCsv { get; set; }
    protected bool IsExportingExcel { get; set; }
    protected bool HasInvalidSubmit { get; set; } = false;
    protected bool HasValidSubmit { get; set; } = false;

    protected void ToggleLoading()
    {
        IsLoading = !IsLoading;
    }

    protected void ToggleExportingCsv()
    {
        IsExportingCsv = !IsExportingCsv;
    }

    protected void ToggleExportingExcel()
    {
        IsExportingExcel = !IsExportingExcel;
    }

    protected void NotificarErroCarregarDados(Exception ex)
    {
        NotifierService?.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Erro ao carregar dados",
                Detail = ex.Message,
                Duration = 4000,
                CloseOnClick = true,
            });
    }

    #region NOTIFICACOES
    public void ExibirSucesso(string summary, string detail, int duration = 3000)
    {
        NotifierService.Notify(severity: NotificationSeverity.Success, summary: summary, detail: detail, duration: duration);
    }

    #endregion

    #region EXPORT
    protected async Task ExportCsv<T>(Grid<T> grid, string fileName)
    {
        ToggleExportingCsv();
        await GridExportProvider.ExportAsync(grid, JsRuntime, ExportEndpoint.CSV, fileName);
        ToggleExportingCsv();
    }

    protected async Task ExportExcel<T>(Grid<T> grid, string fileName)
    {
        ToggleExportingExcel();
        await GridExportProvider.ExportAsync(grid, JsRuntime, ExportEndpoint.EXCEL, fileName);
        ToggleExportingExcel();
    }
    #endregion
}
