@page "/disciplina/consulta"
@using BancoTalentos.Domain.Entity
@using BancoTalentos.Domain.Repositories.Contracts.Interfaces
@using BancoTalentos.UI.Components.Pages.Common

@inherits Page
@inject IDISCIPLINAS_REPOSITORY DisciplinaRepository

<Grid Data=@_disciplinas
      ColumnsDeclared=@GetColumns()
      IsLoading=@IsLoading
      IsExportingCsv=@IsExportingCsv
      IsExportingExcel=@IsExportingExcel
      OnExportCSV="@(async args => await ExportCsv(GridComponent, EXPORT_FILE_NAME))"
      OnExportExcel="@(async args => await ExportExcel(GridComponent, EXPORT_FILE_NAME))"
      CustomActionButton="@_customButtons"
      @ref="GridComponent"/>

@code {
    private IEnumerable<DISCIPLINAS> _disciplinas;
    private IEnumerable<GridColumn> _gridColumns;
    private Grid<DISCIPLINAS> GridComponent;
    private const string EXPORT_FILE_NAME = "Disciplinas";
    private IEnumerable<ButtonComponent<DISCIPLINAS>> _customButtons;

    protected override async Task OnInitializedAsync()
    {
        ToogleLoading();
        try
        {
            _customButtons = GetCustomButtons();
            _disciplinas = await DisciplinaRepository.GetAll_DetalhadoAsync();
        }
        catch (Exception ex)
        {
            NotificarErroCarregarDados(ex);
        }
        finally
        {
            ToogleLoading();
        }
    }

    private IList<GridColumn> GetColumns()
    {
        IList<GridColumn> output = [];

        output.Add(new GridColumn("Código", nameof(DISCIPLINAS.ID), new GridColumnOptions<IRadzenComponent>()
        {

        }));

        output.Add(new GridColumn("Carga horária", nameof(DISCIPLINAS.CARGA_HORARIA), new GridColumnOptions<IRadzenComponent>()
        {

        }));

        output.Add(new GridColumn("Nome", nameof(DISCIPLINAS.NOME), new GridColumnOptions<IRadzenComponent>()
        {

        }));

        output.Add(new GridColumn("Descrição", nameof(DISCIPLINAS.DESCRICAO), new GridColumnOptions<IRadzenComponent>()
            {
                Type = RadzenFormInputType.TextArea
            }));

        output.Add(new GridColumn("Qtd. pessoas capacitadas", nameof(DISCIPLINAS.QTD_PESSOAS_CAPACITADAS), new GridColumnOptions<IRadzenComponent>()
            {
                Type = RadzenFormInputType.TextBox
            }));

        return output;
    }


    private IEnumerable<ButtonComponent<DISCIPLINAS>> GetCustomButtons()
    {
        return new List<ButtonComponent<DISCIPLINAS>>
        {
            new ()
            {
                ButtonStyle = ButtonStyle.Primary,
                Icon = "visibility",
                OnClick =EventCallback.Factory.Create<DISCIPLINAS>(this, async (data) => await VerDetalhes(data))
            },

        };
    }

    async Task VerDetalhes(DISCIPLINAS disciplina)
    {
        await DialogService.OpenAsync<DisciplinaDetalhes>($"Pessoas habilitadas em {disciplina.NOME}",
              new Dictionary<string, object>() { { "Id", disciplina.ID } },
              new DialogOptions() { Width = "80%", Height = "80%" });
    }
}
